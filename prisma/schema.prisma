generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  slug        String    @unique
  description String?
  imagePath   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)
  products    Product[]
}

model Product {
  id                     String                 @id @default(uuid())
  name                   String
  price                  Int
  salePrice             Int?
  onSale                Boolean                @default(false)
  imagePath             String
  description           String
  categoryId            String
  isAvailableForPurchase Boolean               @default(true)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  cartItems             CartItem[]
  downloadVerifications DownloadVerification[]
  orders                Order[]
  category              Category               @relation(fields: [categoryId], references: [id])

  @@index([categoryId], map: "Product_categoryId_fkey")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Order {
  id              String   @id @default(uuid())
  price           Int
  shippingDetails String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  status          String   @default("pending")
  userId          String
  productId       String
  product         Product  @relation(fields: [productId], references: [id])
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([productId], map: "Order_productId_fkey")
  @@index([userId], map: "Order_userId_fkey")
}

model DownloadVerification {
  id        String   @id @default(uuid())
  expiresAt DateTime
  createdAt DateTime @default(now())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId], map: "DownloadVerification_productId_fkey")
}

model Cart {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  quantity  Int
  cartId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([cartId], map: "CartItem_cartId_fkey")
  @@index([productId], map: "CartItem_productId_fkey")
}
