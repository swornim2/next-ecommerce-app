// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  slug        String    @unique
  description String?
  imagePath   String?   // Optional image path for category
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id                     String                 @id @default(uuid())
  name                   String
  price                  Int
  imagePath             String
  description           String
  categoryId            String                  // Required field for category
  category              Category               @relation(fields: [categoryId], references: [id])
  isAvailableForPurchase Boolean               @default(true)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  orders                Order[]
  downloadVerifications DownloadVerification[]
  cartItems             CartItem[]
  
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Order {
  id              String   @id @default(uuid())
  price           Int
  shippingDetails String?  // JSON string containing shipping information
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  status          String   @default("pending") // pending, processing, shipped, delivered, cancelled

  userId          String
  productId       String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product         Product  @relation(fields: [productId], references: [id], onDelete: Restrict)
}

model DownloadVerification {
  id        String   @id @default(uuid())
  expiresAt DateTime
  createdAt DateTime @default(now())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Cart {
  id        String     @id @default(uuid())
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  quantity  Int
  cartId    String
  productId String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
